CREATE TABLE movies (
  id INTENGER PRIMARY KEY,
  name TEXT DEFAULT NULL,
  year INTENGER DEFAULT NULL,
  rank REAL DEFAULT NULL
);

CREATE TABLE actors (
  id INTENGER PRIMARY KEY,
  first_name TEXT DEFAULT NULL,
  last_name TEXT DEFAULT NULL,
  gender TEXT DEFAULT NULL
);

CREATE TABLE roles (
  actor_id INTENGER
  movie_id INTENGER
  role_name TEXT DEFAULT NULL
);

WORKSHOP

Ejercicio 1: Año de nacimiento -> filtrar peliculas por año de nacimiento mio:
SELECT name, year FROM movies WHERE year=1999;

Ejercicio 2: 1982 -> ¿Cuantás películas tiene nuestra base de datos para el año 1982? 
SELECT COUNT(*), year FROM movies WHERE year=1982;

Ejercicio 3: Stacktors -> Encontrá los actores que tienen "stack" en su apellido.
SELECT * FROM actors WHERE last_name LIKE '%stack%';

Ejercicio 4: Juego del nombre de la fama
¿Cúales son los 10 nombres más populares? -> SELECT first_name, COUNT(*) as ocurrences FROM actors GROUP BY first_name ORDER BY ocurrences DESC LIMIT 10;
¿Cúales son los 10 apellidos más populares? -> SELECT last_name, COUNT(*) as ocurrences FROM actors GROUP BY last_name ORDER BY ocurrences DESC LIMIT 10;
¿Cuales son los full_names más populares? -> SELECT first_name || ' ' || last_name as full_name, COUNT(first_name || ' ' || last_name) as ocurrences FROM actors GROUP BY full_name ORDER BY ocurrences DESC LIMIT 10;

Ejercicio 5: Prolifico -> Listá el top 100 de actores más activos y el número de roles en los que participó.
SELECT a.first_name, a.last_name, COUNT(r.role) as role_count FROM actors as a 
JOIN roles as r ON a.id = r.actor_id 
GROUP BY r.actor_id 
ORDER BY role_count DESC LIMIT 100;

Ejercicio 6: Fondo del barril -> ¿Cuántas películas tiene IMBD de cada género ordenado por el más popular?
SELECT mg.genre, COUNT(mg.movie_id) as num_movies_by_genres FROM movies_genres as mg 
JOIN movies ON mg.movie_id = movies.id 
GROUP BY mg.genre 
ORDER BY num_movies_by_genres ASC;

Ejercicio 7: Braveheart -> Lista el nombre y apellido de todos los actores que actuaron en la película 'Braveheart' de 1995, ordenados alfabéticamente por sus apellidos.
SELECT a.first_name, a.last_name FROM actors as a 
JOIN roles as r ON a.id = r.actor_id 
JOIN movies as m ON r.movie_id = m.id WHERE m.name = 'Braveheart' AND m.year = 1995 
ORDER BY a.last_name ASC;

Ejercicio 8: Noir bisiesto -> Listá todos los directores que dirigieron una película de género 'Film-Noir' en un año bisiesto (hagamos de cuenta que todos los años divisibles por 4 son años bisiestos, aunque no sea verdad en la vida real).
Tu query deberá retornar el nombre del director, el nombre de la película y el año, ordenado por el nombre de la película.
SELECT d.first_name, d.last_name, m.name, m.year FROM directors d 
JOIN movies_directors ON d.id = movies_directors.director_id 
JOIN movies as m ON movies_directors.movie_id = m.id 
JOIN movies_genres ON movies_genres.movie_id = m.id
WHERE m.year % 4 = 0 AND movies_genres.genre = 'Film-Noir'
ORDER BY m.name;

Ejercicio 9: Kevin Bacon -> Listá todos los actores que hayan trabajado con Kevin Bacon en una película de Drama (incluí el nombre de la película) y excluí al Sr. Bacon de los resultados.
SELECT m.name, a.first_name, a.last_name FROM movies as m 
JOIN movies_genres as mg ON m.id = mg.movie_id 
JOIN roles as r ON r.movie_id = m.id
JOIN actors as a ON a.id = r.actor_id
WHERE mg.genre = 'Drama' AND m.id IN (
  SELECT m.id FROM movies as m 
  JOIN roles as r ON r.movie_id = m.id
  JOIN actors as a ON r.actor_id = a.id
  WHERE a.first_name = 'Kevin' AND a.last_name = 'Bacon'
)
AND (a.first_name != 'Kevin' AND a.last_name != 'Bacon')
LIMIT 100; 

/* SELECT m.name, a.first_name, a.last_name FROM movies as m 
JOIN movies_genres as mg ON m.id = mg.movie_id 
JOIN roles as r ON r.movie_id = m.id
JOIN actors as a ON a.id = r.actor_id
WHERE mg.genre = 'Drama' AND m.id IN (
  SELECT a.first_name || ' ' || a.last_name as full_name FROM actors as a 
  JOIN roles as r ON a.id = r.actor_id 
  JOIN movies as m ON r.movie_id = m.id
  WHERE full_name = 'Kevin Bacon'
); */


Ejercicio 10: Actores Inmortales -> ¿Cúales son los actores que actuaron en un film antes de 1900 y también en un film después del 2000?
SELECT a.first_name, a.last_name, a.id FROM actors as a 
JOIN roles as r ON a.id = r.actor_id
JOIN movies as m ON m.id = r.movie_id
WHERE m.id IN(
  SELECT m.id FROM movies as m 
  JOIN roles as r ON r.movie_id = m.id
  JOIN actors as a ON a.id = r.actor_id
  WHERE m.year <= 1900 
) 
AND m.id IN (
    SELECT m.id FROM movies as m 
  JOIN roles as r ON r.movie_id = m.id
  JOIN actors as a ON a.id = r.actor_id
  WHERE m.year >= 2000
)
LIMIT 100;


Ejercicio 11: Ocupados en filmacion ->  Buscá actores que hayan tenido cinco, o más, roles distintos en la misma película luego del año 1990.
Escribí un query que retorne el nombre del actor, el nombre de la película y el número de roles distintos que hicieron en esa película (que va a ser ≥5).
SELECT a.first_name, a.last_name, m.name, m.year, COUNT(r.movie_id) as num_roles FROM actors as a 
JOIN roles as r ON r.actor_id = a.id
JOIN movies as m ON r.movie_id = m.id
WHERE roles IN  (
  SELECT * FROM roles as r 
  WHERE num_roles IN (
    SELECT num_roles FROM roles as r 
    JOIN movies as m ON m.id = r.movie_id
    JOIN actors as a ON a.id = r.actor_id
    WHERE m.year >= 1990 
    GROUP BY r.actor_id
  ) >= 5;
)


  





Ejercicio 12: ♀ -> Contá los números de películas que tuvieron sólo actrices. Dividilas por año.
Empezá por incluir películas sin reparto pero, luego, estrechá tu búsqueda a películas que tuvieron reparto.
SELECT m.year, COUNT()

